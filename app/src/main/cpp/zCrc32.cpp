#include <stdint.h>
#include <stddef.h>
#include "zCrc32.h"

/* 1. 8→4 折叠表 */
static const uint32_t fold8[256] = {0x00000000, 0x0a5f4d75, 0x14be9aea, 0x1ee1d79f, 0x14c5eb57, 0x1e9aa622, 0x007b71bd, 0x0a243cc8, 0x1433082d, 0x1e6c4558, 0x008d92c7, 0x0ad2dfb2, 0x00f6e37a, 0x0aa9ae0f, 0x14487990, 0x1e1734e5, 0x15deced9, 0x1f8183ac, 0x01605433, 0x0b3f1946, 0x011b258e, 0x0b4468fb, 0x15a5bf64, 0x1ffaf211, 0x01edc6f4, 0x0bb28b81, 0x15535c1e, 0x1f0c116b, 0x15282da3, 0x1f7760d6, 0x0196b749, 0x0bc9fa3c, 0x16054331, 0x1c5a0e44, 0x02bbd9db, 0x08e494ae, 0x02c0a866, 0x089fe513, 0x167e328c, 0x1c217ff9, 0x02364b1c, 0x08690669, 0x1688d1f6, 0x1cd79c83, 0x16f3a04b, 0x1caced3e, 0x024d3aa1, 0x081277d4, 0x03db8de8, 0x0984c09d, 0x17651702, 0x1d3a5a77, 0x171e66bf, 0x1d412bca, 0x03a0fc55, 0x09ffb120, 0x17e885c5, 0x1db7c8b0, 0x03561f2f, 0x0909525a, 0x032d6e92, 0x097223e7, 0x1793f478, 0x1dccb90d, 0x11b258e1, 0x1bed1594, 0x050cc20b, 0x0f538f7e, 0x0577b3b6, 0x0f28fec3, 0x11c9295c, 0x1b966429, 0x058150cc, 0x0fde1db9, 0x113fca26, 0x1b608753, 0x1144bb9b, 0x1b1bf6ee, 0x05fa2171, 0x0fa56c04, 0x046c9638, 0x0e33db4d, 0x10d20cd2, 0x1a8d41a7, 0x10a97d6f, 0x1af6301a, 0x0417e785, 0x0e48aaf0, 0x105f9e15, 0x1a00d360, 0x04e104ff, 0x0ebe498a, 0x049a7542, 0x0ec53837, 0x1024efa8, 0x1a7ba2dd, 0x07b71bd0, 0x0de856a5, 0x1309813a, 0x1956cc4f, 0x1372f087, 0x192dbdf2, 0x07cc6a6d, 0x0d932718, 0x138413fd, 0x19db5e88, 0x073a8917, 0x0d65c462, 0x0741f8aa, 0x0d1eb5df, 0x13ff6240, 0x19a02f35, 0x1269d509, 0x1836987c, 0x06d74fe3, 0x0c880296, 0x06ac3e5e, 0x0cf3732b, 0x1212a4b4, 0x184de9c1, 0x065add24, 0x0c059051, 0x12e447ce, 0x18bb0abb, 0x129f3673, 0x18c07b06, 0x0621ac99, 0x0c7ee1ec, 0x1edc6f41, 0x14832234, 0x0a62f5ab, 0x003db8de, 0x0a198416,0x0046c963, 0x1ea71efc, 0x14f85389, 0x0aef676c, 0x00b02a19, 0x1e51fd86, 0x140eb0f3, 0x1e2a8c3b, 0x1475c14e, 0x0a9416d1, 0x00cb5ba4, 0x0b02a198, 0x015deced, 0x1fbc3b72, 0x15e37607, 0x1fc74acf, 0x159807ba, 0x0b79d025, 0x01269d50, 0x1f31a9b5, 0x156ee4c0, 0x0b8f335f, 0x01d07e2a, 0x0bf442e2, 0x01ab0f97, 0x1f4ad808, 0x1515957d, 0x08d92c70, 0x02866105, 0x1c67b69a, 0x1638fbef, 0x1c1cc727, 0x16438a52, 0x08a25dcd, 0x02fd10b8, 0x1cea245d, 0x16b56928, 0x0854beb7, 0x020bf3c2, 0x082fcf0a, 0x0270827f, 0x1c9155e0, 0x16ce1895, 0x1d07e2a9, 0x1758afdc, 0x09b97843, 0x03e63536, 0x09c209fe, 0x039d448b, 0x1d7c9314, 0x1723de61, 0x0934ea84, 0x036ba7f1, 0x1d8a706e, 0x17d53d1b, 0x1df101d3, 0x17ae4ca6, 0x094f9b39, 0x0310d64c, 0x0f6e37a0, 0x05317ad5, 0x1bd0ad4a, 0x118fe03f, 0x1babdcf7, 0x11f49182, 0x0f15461d, 0x054a0b68, 0x1b5d3f8d, 0x110272f8, 0x0fe3a567, 0x05bce812, 0x0f98d4da, 0x05c799af, 0x1b264e30, 0x11790345, 0x1ab0f979, 0x10efb40c, 0x0e0e6393, 0x04512ee6, 0x0e75122e, 0x042a5f5b, 0x1acb88c4, 0x1094c5b1, 0x0e83f154, 0x04dcbc21, 0x1a3d6bbe, 0x106226cb, 0x1a461a03, 0x10195776, 0x0ef880e9, 0x04a7cd9c, 0x196b7491, 0x133439e4, 0x0dd5ee7b, 0x078aa30e, 0x0dae9fc6, 0x07f1d2b3, 0x1910052c, 0x134f4859, 0x0d587cbc, 0x070731c9, 0x19e6e656, 0x13b9ab23, 0x199d97eb, 0x13c2da9e, 0x0d230d01, 0x077c4074, 0x0cb5ba48, 0x06eaf73d, 0x180b20a2, 0x12546dd7, 0x1870511f, 0x122f1c6a, 0x0ccecbf5, 0x06918680, 0x1886b265, 0x12d9ff10, 0x0c38288f, 0x066765fa, 0x0c435932, 0x061c1447, 0x18fdc3d8, 0x12a28ead};

/* 2. 4 字节 CRC-32C 查表（256×4） */
static const uint32_t crc32c_tab[256] = {0x00000000, 0x0a5f4d75, 0x14be9aea, 0x1ee1d79f, 0x14c5eb57, 0x1e9aa622, 0x007b71bd, 0x0a243cc8, 0x1433082d, 0x1e6c4558, 0x008d92c7, 0x0ad2dfb2, 0x00f6e37a, 0x0aa9ae0f, 0x14487990, 0x1e1734e5, 0x15deced9, 0x1f8183ac, 0x01605433, 0x0b3f1946, 0x011b258e, 0x0b4468fb, 0x15a5bf64, 0x1ffaf211, 0x01edc6f4, 0x0bb28b81, 0x15535c1e, 0x1f0c116b, 0x15282da3, 0x1f7760d6, 0x0196b749, 0x0bc9fa3c, 0x16054331, 0x1c5a0e44, 0x02bbd9db, 0x08e494ae, 0x02c0a866, 0x089fe513, 0x167e328c, 0x1c217ff9, 0x02364b1c, 0x08690669, 0x1688d1f6, 0x1cd79c83, 0x16f3a04b, 0x1caced3e, 0x024d3aa1, 0x081277d4, 0x03db8de8, 0x0984c09d, 0x17651702, 0x1d3a5a77, 0x171e66bf, 0x1d412bca, 0x03a0fc55, 0x09ffb120, 0x17e885c5, 0x1db7c8b0, 0x03561f2f, 0x0909525a, 0x032d6e92, 0x097223e7, 0x1793f478, 0x1dccb90d, 0x11b258e1, 0x1bed1594, 0x050cc20b, 0x0f538f7e, 0x0577b3b6, 0x0f28fec3, 0x11c9295c, 0x1b966429, 0x058150cc, 0x0fde1db9, 0x113fca26, 0x1b608753, 0x1144bb9b, 0x1b1bf6ee, 0x05fa2171, 0x0fa56c04, 0x046c9638, 0x0e33db4d, 0x10d20cd2, 0x1a8d41a7, 0x10a97d6f, 0x1af6301a, 0x0417e785, 0x0e48aaf0, 0x105f9e15, 0x1a00d360, 0x04e104ff, 0x0ebe498a, 0x049a7542, 0x0ec53837, 0x1024efa8, 0x1a7ba2dd, 0x07b71bd0, 0x0de856a5, 0x1309813a, 0x1956cc4f, 0x1372f087, 0x192dbdf2, 0x07cc6a6d, 0x0d932718, 0x138413fd, 0x19db5e88, 0x073a8917, 0x0d65c462, 0x0741f8aa, 0x0d1eb5df, 0x13ff6240, 0x19a02f35, 0x1269d509, 0x1836987c, 0x06d74fe3, 0x0c880296, 0x06ac3e5e, 0x0cf3732b, 0x1212a4b4, 0x184de9c1, 0x065add24, 0x0c059051, 0x12e447ce, 0x18bb0abb, 0x129f3673, 0x18c07b06, 0x0621ac99, 0x0c7ee1ec, 0x1edc6f41, 0x14832234, 0x0a62f5ab, 0x003db8de, 0x0a198416,0x0046c963, 0x1ea71efc, 0x14f85389, 0x0aef676c, 0x00b02a19, 0x1e51fd86, 0x140eb0f3, 0x1e2a8c3b, 0x1475c14e, 0x0a9416d1, 0x00cb5ba4, 0x0b02a198, 0x015deced, 0x1fbc3b72, 0x15e37607, 0x1fc74acf, 0x159807ba, 0x0b79d025, 0x01269d50, 0x1f31a9b5, 0x156ee4c0, 0x0b8f335f, 0x01d07e2a, 0x0bf442e2, 0x01ab0f97, 0x1f4ad808, 0x1515957d, 0x08d92c70, 0x02866105, 0x1c67b69a, 0x1638fbef, 0x1c1cc727, 0x16438a52, 0x08a25dcd, 0x02fd10b8, 0x1cea245d, 0x16b56928, 0x0854beb7, 0x020bf3c2, 0x082fcf0a, 0x0270827f, 0x1c9155e0, 0x16ce1895, 0x1d07e2a9, 0x1758afdc, 0x09b97843, 0x03e63536, 0x09c209fe, 0x039d448b, 0x1d7c9314, 0x1723de61, 0x0934ea84, 0x036ba7f1, 0x1d8a706e, 0x17d53d1b, 0x1df101d3, 0x17ae4ca6, 0x094f9b39, 0x0310d64c, 0x0f6e37a0, 0x05317ad5, 0x1bd0ad4a, 0x118fe03f, 0x1babdcf7, 0x11f49182, 0x0f15461d, 0x054a0b68, 0x1b5d3f8d, 0x110272f8, 0x0fe3a567, 0x05bce812, 0x0f98d4da, 0x05c799af, 0x1b264e30, 0x11790345, 0x1ab0f979, 0x10efb40c, 0x0e0e6393, 0x04512ee6, 0x0e75122e, 0x042a5f5b, 0x1acb88c4, 0x1094c5b1, 0x0e83f154, 0x04dcbc21, 0x1a3d6bbe, 0x106226cb, 0x1a461a03, 0x10195776, 0x0ef880e9, 0x04a7cd9c, 0x196b7491, 0x133439e4, 0x0dd5ee7b, 0x078aa30e, 0x0dae9fc6, 0x07f1d2b3, 0x1910052c, 0x134f4859, 0x0d587cbc, 0x070731c9, 0x19e6e656, 0x13b9ab23, 0x199d97eb, 0x13c2da9e, 0x0d230d01, 0x077c4074, 0x0cb5ba48, 0x06eaf73d, 0x180b20a2, 0x12546dd7, 0x1870511f, 0x122f1c6a, 0x0ccecbf5, 0x06918680, 0x1886b265, 0x12d9ff10, 0x0c38288f, 0x066765fa, 0x0c435932, 0x061c1447, 0x18fdc3d8, 0x12a28ead};

/* 3. 折叠 8→4 字节函数 */
static inline uint32_t fold64(uint64_t v, uint32_t crc)
{
    uint8_t *p = (uint8_t *)&v;
    crc ^= fold8[p[0]];
    crc ^= fold8[p[1]];
    crc ^= fold8[p[2]];
    crc ^= fold8[p[3]];
    crc ^= fold8[p[4]];
    crc ^= fold8[p[5]];
    crc ^= fold8[p[6]];
    crc ^= fold8[p[7]];
    return crc;
}

/* 4. 尾部 0–7 字节，逐字节查表 */
static inline uint32_t crc32c_tail(const uint8_t *p, size_t len, uint32_t crc)
{
    while (len--) {
        crc = crc32c_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
    }
    return crc;
}

/* 5. 入口函数 */
uint32_t crc32c_fold(const void *data, size_t len)
{
    LOGD("crc32c_fold called, len: %zu", len);
    uint32_t crc = 0xFFFFFFFF;      /* 初始值 CRC-32C */

    /* 5-1. 8 字节主循环 */
    const uint64_t *p64 = (const uint64_t *)data;
    while (len >= 8) {
        uint64_t v = *p64++;
        crc = fold64(v, crc);
        len -= 8;
    }

    /* 5-2. 剩余 0–7 字节 */
    data = (const uint8_t *)p64;
    crc  = crc32c_tail((const uint8_t *)data, len, crc);
    LOGD("crc32c_fold, after crc32c_tail: %u, len: %zu", crc, len);

    return crc ^ 0xFFFFFFFF;        /* 最终异或 */
}